<TreeView x:Class="Waveface.Client.SourceTree"
          xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
          xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
          xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
          xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
          x:Name="UserControl"
          Background="{x:Null}"
          BorderBrush="{x:Null}"
          FontFamily="Segoe UI"
          Grid.IsSharedSizeScope="True"
          ItemContainerStyle="{DynamicResource TreeViewItemStyle1}"
          ItemsSource="{Binding IsAsync=True}"
          MouseMove="UserControl_MouseMove"
          MouseUp="UserControl_MouseUp"
          PreviewKeyDown="UserControl_PreviewKeyDown"
          PreviewMouseLeftButtonDown="UserControl_PreviewMouseLeftButtonDown"
          VirtualizingStackPanel.IsVirtualizing="True"
          VirtualizingStackPanel.VirtualizationMode="Recycling"
          d:DesignHeight="392.26"
          d:DesignWidth="200"
          mc:Ignorable="d" Style="{DynamicResource TreeViewStyle2}">
    <TreeView.Resources>

        <ContextMenu x:Key="SourceContextMenu">
            <MenuItem Click="miStar_Click" Header="{DynamicResource menuitem_star}" />
            <MenuItem Click="miCreateFavorite_Click" Header="{DynamicResource menuitem_create_album}" />
            <MenuItem Click="miAddToFavorite_Click" Header="{DynamicResource menuitem_add_album}" />
            <Separator />
            <MenuItem Click="miLocateOnDisk_Click" Header="{DynamicResource menuitem_locate}" />
            <MenuItem Click="miDelete_Click" Header="{DynamicResource menuitem_delete}" />
        </ContextMenu>

        <!--
            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}"
            Color="Transparent" />
            <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}"
            Color="Transparent" />
        -->

        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
        <BitmapImage x:Key="SelectedIcon"
                     CacheOption="OnDemand"
                     UriSource="pack://application:,,,/Resource/ico_folder_select.png" />
        <BitmapImage x:Key="UnSelectedIcon"
                     CacheOption="OnDemand"
                     UriSource="pack://application:,,,/Resource/ico_folder_unselect.png" />
        <BitmapImage x:Key="UnsortedIcon"
                     CacheOption="OnDemand"
                     UriSource="pack://application:,,,/Resource/ico_unsort_unselect.png" />
        <BitmapImage x:Key="UnsortedSelectedIcon"
                     CacheOption="OnDemand"
                     UriSource="pack://application:,,,/Resource/ico_unsort_select.png" />
        <BitmapImage x:Key="CycleIcon"
                     CacheOption="OnDemand"
                     UriSource="pack://application:,,,/Resource/arrow_circle_double.png" />
        <Style x:Key="TreeViewItemStyle1" TargetType="{x:Type TreeViewItem}">
            <EventSetter Event="UIElement.PreviewMouseLeftButtonDown" Handler="TreeViewItem_PreviewMouseLeftButtonDown" />
            <Setter Property="Template" Value="{DynamicResource TreeViewItemControlTemplate1}" />
        </Style>
		<PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z"/>
        <ControlTemplate x:Key="TreeViewItemControlTemplate1" TargetType="{x:Type TreeViewItem}">
            <Grid x:Name="Item">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition />
                </Grid.RowDefinitions>
                <DockPanel x:Name="dpItem" Grid.ColumnSpan="2">
                    <ToggleButton x:Name="Expander"
                                  Background="Transparent"
                                  ClickMode="Press"
                                  IsChecked="{Binding IsExpanded,
                                                      RelativeSource={RelativeSource TemplatedParent}}">
                        <ToggleButton.Style>
                            <Style TargetType="{x:Type ToggleButton}">
                                <Setter Property="Focusable" Value="False" />
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
        				<Border Background="Transparent" Height="16" Padding="5,5,5,5" Width="16">
        					<Path x:Name="ExpandPath" Data="{StaticResource TreeArrow}" Fill="#FFA8A8A8" Stroke="#FF989898">
        						<Path.RenderTransform>
        							<RotateTransform Angle="135" CenterY="3" CenterX="3"/>
        						</Path.RenderTransform>
        					</Path>
        				</Border>
        				<ControlTemplate.Triggers>
        					<Trigger Property="IsMouseOver" Value="True">
        						<Setter Property="Stroke" TargetName="ExpandPath" Value="#FF1BBBFA"/>
        					</Trigger>
        					<Trigger Property="IsChecked" Value="True">
        						<Setter Property="RenderTransform" TargetName="ExpandPath">
        							<Setter.Value>
        								<RotateTransform Angle="180" CenterY="3" CenterX="3"/>
        							</Setter.Value>
        						</Setter>
        					</Trigger>
        				</ControlTemplate.Triggers>
        			</ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ToggleButton.Style>
                    </ToggleButton>
                    <Border x:Name="Bd"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="PART_Header"
                                          Content="{TemplateBinding Header}"
                                          ContentSource="Header"
                                          ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                          ContentTemplate="{TemplateBinding HeaderTemplate}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                </DockPanel>
                <Grid x:Name="gdItems"
                      Grid.Row="1"
                      Grid.ColumnSpan="2">
                    <ItemsPresenter x:Name="ItemsHost"
                                    Grid.Row="0"
                                    Grid.Column="0"
                                    Grid.ColumnSpan="1" />
                </Grid>
            </Grid>
            <ControlTemplate.Triggers>

                <Trigger Property="IsExpanded" Value="False">
                    <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
                </Trigger>
                <!--<Trigger Property="HasItems" Value="True">
                    <Setter TargetName="Expander" Property="Margin" Value="10,0,0,0" />
                </Trigger>-->
                <Trigger Property="HasItems" Value="False">
                    <Setter TargetName="Expander" Property="Visibility" Value="Collapsed" />
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsMouseOver" Value="True" />
                        <Condition Property="IsExpanded" Value="False" />
                        <Condition Property="HasItems" Value="False" />
                    </MultiTrigger.Conditions>
					<Setter TargetName="dpItem" Property="Background" Value="#5FB0E0E6" />
                </MultiTrigger>
                 <Trigger Property="IsSelected" Value="True">
					<Setter TargetName="dpItem" Property="Background" Value="#d5d5d5" />
                    </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <SolidColorBrush x:Key="ListBorder" Color="#828790"/>
     
        <Style x:Key="TreeViewStyle2" TargetType="{x:Type TreeView}">
        	<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        	<Setter Property="BorderBrush" Value="{StaticResource ListBorder}"/>
        	<Setter Property="BorderThickness" Value="1"/>
        	<Setter Property="Padding" Value="1"/>
        	<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        	<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        	<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        	<Setter Property="VerticalContentAlignment" Value="Center"/>
        	<Setter Property="Template">
        		<Setter.Value>
        			<ControlTemplate TargetType="{x:Type TreeView}">
        				<Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
        				<ItemsPresenter/>
        				</Border>
        				<ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
        			</ControlTemplate>
        		</Setter.Value>
        	</Setter>
        	<Style.Triggers>
        		<Trigger Property="VirtualizingStackPanel.IsVirtualizing" Value="true">
        			<Setter Property="ItemsPanel">
        				<Setter.Value>
        					<ItemsPanelTemplate>
        						<VirtualizingStackPanel/>
        					</ItemsPanelTemplate>
        				</Setter.Value>
        			</Setter>
        		</Trigger>
        	</Style.Triggers>
        </Style>
    </TreeView.Resources>

    <TreeView.ItemTemplate>
        <HierarchicalDataTemplate ItemsSource="{Binding Contents}">
            <StackPanel AllowDrop="False" Orientation="Horizontal">
				<Image x:Name="icon"
                               Grid.Column="0"
                       Stretch="None" 
							    HorizontalAlignment="Center" VerticalAlignment="Center"
                               Source="{StaticResource UnSelectedPC}" />

                <Label x:Name="item" Content="{Binding Name}" Foreground="#a8a8a8"  />

                <Image x:Name="recvingIcon"
                       IsVisibleChanged="recvingIcon_IsVisibleChanged"
                       Source="{StaticResource CycleIcon}"
                       Visibility="{Binding IsRecving,
                                            Converter={StaticResource BooleanToVisibilityConverter}}" />
            </StackPanel>
            <HierarchicalDataTemplate.ItemTemplate>
                <DataTemplate>
                    <Grid x:Name="item"
                          Height="25"
                          Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <Image x:Name="icon"
                               Grid.Column="0"
                               Stretch="None" 
							    HorizontalAlignment="Center" VerticalAlignment="Center"
                               Margin="28,2,0,0"
                               Source="{StaticResource UnSelectedIcon}" />

                        <Label x:Name="sourceName"
                               Grid.Column="1"
                               VerticalContentAlignment="Center"
                               Content="{Binding Name}"
                               Foreground="#a8a8a8" />

                        <Label x:Name="sourceCount"
                               Grid.Column="2"
                               HorizontalAlignment="Right"
                               VerticalContentAlignment="Center"
                               Content="{Binding ContentCount}"
                               Foreground="#a8a8a8" />
                    </Grid>

                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=TreeViewItem}, Path=IsSelected}" Value="True">
                            <Setter TargetName="icon" Property="Source" Value="{StaticResource SelectedIcon}" />
                            <Setter TargetName="sourceName" Property="Foreground" Value="Black" />
                            <Setter TargetName="item" Property="ContextMenu" Value="{StaticResource SourceContextMenu}" />
                            <Setter TargetName="sourceCount" Property="Foreground" Value="Black" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=TreeViewItem}, Path=DataContext.ID}" Value="Unsorted">
                            <Setter TargetName="item" Property="ContextMenu" Value="{x:Null}" />
                        </DataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType=TreeViewItem}, Path=DataContext.ID}" Value="Unsorted" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType=TreeViewItem}, Path=IsSelected}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="icon" Property="Source" Value="{StaticResource UnsortedIcon}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType=TreeViewItem}, Path=DataContext.ID}" Value="Unsorted" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType=TreeViewItem}, Path=IsSelected}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="icon" Property="Source" Value="{StaticResource UnsortedSelectedIcon}" />
                        </MultiDataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </HierarchicalDataTemplate.ItemTemplate>

										                  <HierarchicalDataTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=TreeViewItem}, Path=IsSelected}" Value="True">
                            <Setter TargetName="item" Property="Foreground" Value="Black" />
                    <Setter TargetName="icon" Property="Source" Value="{StaticResource SelectedPC}"/>
                </DataTrigger>
						</HierarchicalDataTemplate.Triggers>
        </HierarchicalDataTemplate>
    </TreeView.ItemTemplate>
</TreeView>